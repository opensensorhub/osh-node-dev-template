import org.apache.tools.ant.taskdefs.condition.Os

apply from: gradle.oshCoreDir + '/common.gradle'
description = ''

// UPDATE VERSION OF PROJECT
allprojects {
  version = '1.0.0'
}

subprojects {
  // inject all repositories from included builds if any
  repositories.addAll(rootProject.repositories)
}


// SET DEPENDENCIES
dependencies {
  implementation 'org.sensorhub:sensorhub-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-core-osgi:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-datastore-h2:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-swe:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-webui-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-consys:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-sweapi:' + oshCoreVersion
  //implementation project(':sensorhub-driver-template')
  // My Sample
  //implementation project(':sensorhub-driver-gps-nmea')
  implementation project(':sensorhub-driver-KY032')
  implementation project(':sensorhub-driver-simulator')
  //  implementation project(':[service-name]')
  //  implementation project(':[driver-name]')
  //
  // Ex:
  //
  //  implementation project(':sensorhub-storage-compat')
  //  implementation project(':sensorhub-storage-h2')
  //  implementation project(':sensorhub-service-video')
  //  implementation project(':sensorhub-driver-videocam')
}

// create one configuration for each distribution
configurations {
  main
}

// DISTRIBUTION BASE NAME UPDATE
distributions {
  main {
    // This names the file under build > distributions
    distributionBaseName = 'OSH_Distribution_01'
    contents {
      from 'dist/scripts/'
      into ('config') {
        from 'dist/config'
      }
      from 'README.md'
      into('web') {
        from 'web'
      }
      into('lib') {
        from project.configurations.runtimeClasspath
      }
      subprojects.each { p ->
        into('config/sensorML') {
          from("${p.projectDir}/sensorML")
        }
      }
    }
  }
}


// Build Project and send to Pi
tasks.register("deployToPi",Exec){
  dependsOn(build)

  //define paths and settings:
  def piUser = "pi"
  def piHost = "192.168.1.122"
  def piPassword = "raspberry"
  def piTargetDir = "/home/pi/Desktop/KY032"
  def localZipPath = "build/distributions/OSH_Distribution_01-1.0.0.zip"
  def remoteUnzipDir = "${piTargetDir}/OSH_Distribution_01-1.0.0"

  doFirst {
    if (!file(localZipPath).exists()) {
      println("File Does Not Exist")
      throw new GradleException("Distribution ZIP not found")
    }
  }
  // Use sshpass + scp to send the file
  commandLine 'sh', '-c', """
    sshpass -p '${piPassword}' scp '${localZipPath}' ${piUser}@${piHost}:${piTargetDir} && \
    sshpass -p '${piPassword}' ssh ${piUser}@${piHost} '
    cd ${piTargetDir} && \
    unzip -o OSH_Distribution_01-1.0.0.zip
    '
  """
  // Add the following under 'unzip' if you want to start the program server
//  cd ${remoteUnzipDir} && \
//    chmod +x launch.sh && \
//    ./launch.sh

}


apply from: gradle.oshCoreDir + '/release.gradle'
